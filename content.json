{"pages":[],"posts":[{"title":"[翻译]Knitting.com 第1天 - 选择一个利基市场并为一个域名支付8万美元","text":"原文链接：https://www.ecomcrew.com/knitting-com-domain-name-niche-selection/ 作者：Dave Bryant Mike和我刚刚开始了一个全新的品牌（我们第一次直接在一个品牌上合作） , knitting.com。 这将标志着我们将在未来12个月内进行的一系列博文和播客的第一篇，记录将knitting.com达成这样的目标的过程，在12个月内成为一个7位数的品牌，在5年内成为一个8位数的品牌。这将是一个类似于几年前的系列，因为我有一个关于从头开始建立Offroading Gear的系列。 在这篇博文中，我将详细介绍我们如何选择我们将要进入的利基市场，以及购买域名的谈判和估价过程。 在2022年剩下的时间里，我们将使用Knitting.com作为我们的Secret Sauce会员的真实案例研究。每个月我们将详细介绍我们现在为knitting.com所做的一件特别的事情，从产品开发到我们用于所有品牌的内容模板，你可以用来启动和发展自己的业务。我们的下一堂课是在2月23日。这是关于利基选择和竞争者分析。为你的品牌获取秘诀。 Knitting.com的目标和商业计划Knitting.com将是一个得到内容网站大力支持的电子商务品牌。这与我们在Offroading.com和Tactical.com的其他项目有类似的路径。我们坚信，拥有一个强大的亚马逊之外的存在对于建立一个亚马逊上的品牌至关重要。 在未来的一篇博文中，我将详细介绍我们整个Traction EOS计划，包括我们的全部愿景和目标。然而，在一个非常高的水平上，我们的最终目标是成为亚马逊上的第一针织品牌，我们的收入目标如下： 在12个月内（2023年2月）达到80,000美元/月（百万美元的运行速率）。 在36个月内（2025年2月）达到25万美元/月（300万美元的运行速率）。 在50个月内（2027年2月）达到62.5万美元/月（750万美元的运行速率）。 建设还是购买：决定从头开始建立一个企业，而不是购买在决定开发一个新品牌时，我们的第一个决定涉及经典的两难问题：建设还是购买。我们是购买一个有实际收入的现有网站/品牌，还是从头开始建立一些东西？我们有一个25万到50万美元的预算，我们想在这个品牌/项目上开始花费，我们最初的意图是购买一个现有的网站。购买一个有实际收入的现有网站有其优点和缺点。 购买一个网站：优点 现有的和可预测的收入 启动和运行所需的时间较少 购买现有企业容易获得贷款 购买一个网站：弊端 必须支付4-5倍的EBITDA（或更多）。 竞争激烈的卖方市场，你要与资金雄厚的聚合商竞争 供应有限 时间密集的购买过程 Mike和我为购买企业寻找了一年多的时间，我们一无所获。最大的问题是，大多数低于50万美元的企业质量很差。例如，有很多企业都有单一的英雄SKU，高度依赖几个关键词的排名。还有一些企业是单人店，由其业主高效经营，几乎没有改进的余地。如果我们像过去那样为一个网站支付2.5倍的费用，这些问题就不会那么严重。但是，当你经常为一个企业支付4.5倍或更多时，就会产生很多风险。 因此，在花了一年时间寻找完美的企业后，我们意识到，在我们寻找企业的时间里，我们可以更快地从头开始建立一个企业。同样，这在很大程度上与我们正在寻找购买一个收入低于100万美元的企业这一事实有关。一个100万美元收入的企业从零开始是相对 “容易 “的（见我的Offroading Rebuilding重建100万美元品牌系列）。一个500万美元收入的企业则难得多。 挑选一个利基市场来建立一个品牌在决定从头开始建立一些东西之后，我们必须选择一个利基市场来建立这个业务。我们对我们要进入的利基市场有几个标准。 一个拥有合理规模的热情客户的受众，在Facebook的受众中被很好地定义了。 有机会获得广泛的产品目录 有机会改善现有产品 有机会提供大量的内容，最好是有潜力的数字产品 在亚马逊上没有饱和 在从拉斯维加斯到棕榈泉的车程中，我们对许多利基进行了辩论。Mike和我都经常以爱好来选择我们进入的利基市场。铁路模型是我们两个人想出的潜在利基之一。 我们在研究阶段做的一件事是在AHREFS中搜索主要关键词，看看估计的搜索数量和关键词难度。 不幸的是，结果发现对于铁路模型来说，搜索量很低（我们喜欢看到主要关键词的搜索量在数千或低万，而不是数百），而且这些关键词的排名超级难。 我们辩论过开发一个铁路模型品牌。然而，观众的规模和竞争力太多了。 钓鱼是另一个进入候选名单的利基市场。与铁路模型不同的是，这个行业的受众非常庞大。 然而，竞争也是非常激烈的，更重要的是，我们认为我们将很难在任何现有产品的基础上进行改进：鱼饵和鱼竿是相当基本的产品，很难改进。 经过深思熟虑，我们回到了Mike多年前考虑过的一个利基市场：针织。它满足了我们的大部分要求：受众足够大，但不是太大（针织的AHREFS关键词搜索量为4.1万），内容机会的数量是巨大的（你可以提供的图案数量是无穷无尽的），而且在这个利基中你可以提供相当数量的产品。最大的挑战是，两个中年直男并不完全符合典型的编织者特征，我很快就会解决这个问题。 花费80,000美元购买域名（值得吗？）Mike和我都坚信一个强大的域名对我们任何品牌的重要性。我们目前拥有 tactical.com 和 offroading.com，而且我们也为其他业务拥有高级顶级域名。这有一定的虚荣心（域名基本上是_第一个_NFT！），但它也很实用。一个高级域名不仅给你的客户和读者带来权威和信任，而且也给你的合作者，如供应商和影响者带来权威和信任。特别是作为一个新的品牌，从一开始就拥有这种信誉是很重要的。 由于一些奇怪的巧合，Mike在几年前曾与该域名的所有者进行过讨论。这个人是一个60多岁的老人，10多年前就购买了这个域名。当Mike第一次与他交谈时，他想以15万美元出售这个域名。我们都认为这远远超过了我们想要支付的价格，但也认为这个名字可能价值接近6位数。 在全身心投入Knitting.com的想法之前，我们做的一件事是在当地的工艺品商店做一些竞争性研究，看看市场的深度。 域名购买是你可能遇到的最独特的购买交易之一。没有任何公式来评估域名的价值，而且域名的独特性意味着永远没有直接的比较。这也是一个流动性很差的市场，域名所有者往往会在一个域名上坐上好几年–这意味着时机就是一切。因此，抓住一个积极的卖家是很重要的。 通常情况下，卖家对域名的要价会大大高于他们的实际价格。我的经验是，这大约是他们实际想得到的价格的2-3倍。在来回折腾之后，我们最终与卖家达成协议，以8万美元购买该域名。因此，8万美元和500美元的托管费之后，这个域名就是我们的了。 是否有必要拥有这样的高级名称来建立一个品牌？绝对不是。有足够多的DollarShave Club.com和其他建立在梦幻般的名字上的巨大品牌可以说明这一点。 但如前所述，它将使我们在一开始就具有可信度（而且这种可信度已经开始产生红利，我将在下一次更新中谈到）。有了这个域名，也会有一个相当大的SEO提升。谷歌仍然对关键词域名给予非常大的偏爱。 在域名上花一大笔钱的最重要的论据是，它现在让我们在项目上有了很大的投资（你有多少个8美元的Godaddy域名，你从来没有做过什么？我知道我有很多！) 要忘记你花钱买的8万美元的域名，那就难上加难了。 在同一个网站上建立一个内容网站和一个产品品牌域名和品牌之间有一个奇怪的悖论–对于像knitting.com这样的内容网站来说，一个完美的域名对于一个产品品牌来说往往是一个糟糕的名字。由于一系列的原因，其中最重要的是亚马逊，我们的品牌名称不能是knitting.com。 对于我们的品牌名称，我们已经决定采用knitting.com这个词的 “聪明 “变体，这将与我们的域名有很强的关系，但也足够独特，不会在亚马逊或商标局那里惹上麻烦。请继续关注未来关于这个品牌名称的更新。 还有一个问题是，你是把你的电子商务商店和内容网站放在不同的域名上，还是放在同一个域名上。双方都有争论。不同的域名使所有的东西都分开，而且更干净，但需要大约两倍的工作量。在这种情况下，我们已经决定，由于knitting.com域名的价值，我们的内容网站将是knitting.com，而我们的商店将是类似shop.knitting.com的东西。 在发展由内容品牌支持的电子商务品牌时，关于品牌名称或域名问题，没有每个人的正确答案，但我们认为我们在这种情况下采取的方法对我们来说是最佳答案。 最后的思考购买knitting.com绝对是我有史以来最大的一次域名购买。(另一方面，Mike有几个域名的购买价格超过了这个数字)。我个人对花这么多钱买域名几乎没有什么担心或怀疑，因为它几乎完全没有风险：域名总是有一些内在的价值在里面。不过，正如我将在本系列的下一部分写到的那样，我们最近承担了一些支出，这些支出几乎同样大，但却不那么无风险。","link":"/2022/02/17/%5B%E7%BF%BB%E8%AF%91%5DKnitting.com%20%E7%AC%AC1%E5%A4%A9%20-%20%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E5%88%A9%E5%9F%BA%E5%B8%82%E5%9C%BA%E5%B9%B6%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E6%94%AF%E4%BB%988%E4%B8%87%E7%BE%8E%E5%85%83/"},{"title":"Python搭配youtube-dl下载油管视频","text":"12345678910111213141516171819202122232425262728293031323334from __future__ import unicode_literalsimport youtube_dlclass MyLogger(object): def debug(self, msg): pass def warning(self, msg): pass def error(self, msg): print(msg)def my_hook(d): if d['status'] == 'finished': print('Done downloading, now converting ...')ydl_opts = { # 'format': 'bestaudio/best', # 'postprocessors': [{ # 'key': 'FFmpegExtractAudio', # 'preferredcodec': 'mp3', # 'preferredquality': '192', # }], # 'logger': MyLogger(), # 'progress_hooks': [my_hook], 'proxy':'socks5://127.0.0.1:10808/' }with youtube_dl.YoutubeDL(ydl_opts) as ydl: ydl.download(['https://youtu.be/XXXXXX']) 坑：不要给自己的Python脚本文件命名成和模块库一致，拿本案例来说，不要把你的Python文件命名为“youtube_dl.py”，否则会调用失败报错。 youtube-dl 安装方法 Python示例代码https://github.com/ytdl-org/youtube-dl/ 配置项https://github.com/ytdl-org/youtube-dl/blob/3e4cedf9e8cd3157df2457df7274d0c842421945/youtube_dl/YoutubeDL.py#L137-L312 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169Available options: username: Username for authentication purposes. password: Password for authentication purposes. videopassword: Password for accessing a video. ap_mso: Adobe Pass multiple-system operator identifier. ap_username: Multiple-system operator account username. ap_password: Multiple-system operator account password. usenetrc: Use netrc for authentication instead. verbose: Print additional info to stdout. quiet: Do not print messages to stdout. no_warnings: Do not print out anything for warnings. forceurl: Force printing final URL. forcetitle: Force printing title. forceid: Force printing ID. forcethumbnail: Force printing thumbnail URL. forcedescription: Force printing description. forcefilename: Force printing final filename. forceduration: Force printing duration. forcejson: Force printing info_dict as JSON. dump_single_json: Force printing the info_dict of the whole playlist (or video) as a single JSON line. simulate: Do not download the video files. format: Video format code. See options.py for more information. outtmpl: Template for output names. restrictfilenames: Do not allow &quot;&amp;&quot; and spaces in file names ignoreerrors: Do not stop on download errors. force_generic_extractor: Force downloader to use the generic extractor nooverwrites: Prevent overwriting files. playliststart: Playlist item to start at. playlistend: Playlist item to end at. playlist_items: Specific indices of playlist to download. playlistreverse: Download playlist items in reverse order. playlistrandom: Download playlist items in random order. matchtitle: Download only matching titles. rejecttitle: Reject downloads for matching titles. logger: Log messages to a logging.Logger instance. logtostderr: Log messages to stderr instead of stdout. writedescription: Write the video description to a .description file writeinfojson: Write the video description to a .info.json file writeannotations: Write the video annotations to a .annotations.xml file writethumbnail: Write the thumbnail image to a file write_all_thumbnails: Write all thumbnail formats to files writesubtitles: Write the video subtitles to a file writeautomaticsub: Write the automatically generated subtitles to a file allsubtitles: Downloads all the subtitles of the video (requires writesubtitles or writeautomaticsub) listsubtitles: Lists all available subtitles for the video subtitlesformat: The format code for subtitles subtitleslangs: List of languages of the subtitles to download keepvideo: Keep the video file after post-processing daterange: A DateRange object, download only if the upload_date is in the range. skip_download: Skip the actual download of the video file cachedir: Location of the cache files in the filesystem. False to disable filesystem cache. noplaylist: Download single video instead of a playlist if in doubt. age_limit: An integer representing the user's age in years. Unsuitable videos for the given age are skipped. min_views: An integer representing the minimum view count the video must have in order to not be skipped. Videos without view count information are always downloaded. None for no limit. max_views: An integer representing the maximum view count. Videos that are more popular than that are not downloaded. Videos without view count information are always downloaded. None for no limit. download_archive: File name of a file where all downloads are recorded. Videos already present in the file are not downloaded again. cookiefile: File name where cookies should be read from and dumped to. nocheckcertificate:Do not verify SSL certificates prefer_insecure: Use HTTP instead of HTTPS to retrieve information. At the moment, this is only supported by YouTube. proxy: URL of the proxy server to use geo_verification_proxy: URL of the proxy to use for IP address verification on geo-restricted sites. (Experimental) socket_timeout: Time to wait for unresponsive hosts, in seconds bidi_workaround: Work around buggy terminals without bidirectional text support, using fridibi debug_printtraffic:Print out sent and received HTTP traffic include_ads: Download ads as well default_search: Prepend this string if an input url is not valid. 'auto' for elaborate guessing encoding: Use this encoding instead of the system-specified. extract_flat: Do not resolve URLs, return the immediate result. Pass in 'in_playlist' to only show this behavior for playlist items. postprocessors: A list of dictionaries, each with an entry * key: The name of the postprocessor. See youtube_dl/postprocessor/__init__.py for a list. as well as any further keyword arguments for the postprocessor. progress_hooks: A list of functions that get called on download progress, with a dictionary with the entries * status: One of &quot;downloading&quot;, &quot;error&quot;, or &quot;finished&quot;. Check this first and ignore unknown values. If status is one of &quot;downloading&quot;, or &quot;finished&quot;, the following properties may also be present: * filename: The final filename (always present) * tmpfilename: The filename we're currently writing to * downloaded_bytes: Bytes on disk * total_bytes: Size of the whole file, None if unknown * total_bytes_estimate: Guess of the eventual file size, None if unavailable. * elapsed: The number of seconds since download started. * eta: The estimated time in seconds, None if unknown * speed: The download speed in bytes/second, None if unknown * fragment_index: The counter of the currently downloaded video fragment. * fragment_count: The number of fragments (= individual files that will be merged) Progress hooks are guaranteed to be called at least once (with status &quot;finished&quot;) if the download is successful. merge_output_format: Extension to use when merging formats. fixup: Automatically correct known faults of the file. One of: - &quot;never&quot;: do nothing - &quot;warn&quot;: only emit a warning - &quot;detect_or_warn&quot;: check whether we can do anything about it, warn otherwise (default) source_address: (Experimental) Client-side IP address to bind to. call_home: Boolean, true iff we are allowed to contact the youtube-dl servers for debugging. sleep_interval: Number of seconds to sleep before each download when used alone or a lower bound of a range for randomized sleep before each download (minimum possible number of seconds to sleep) when used along with max_sleep_interval. max_sleep_interval:Upper bound of a range for randomized sleep before each download (maximum possible number of seconds to sleep). Must only be used along with sleep_interval. Actual sleep time will be a random float from range [sleep_interval; max_sleep_interval]. listformats: Print an overview of available video formats and exit. list_thumbnails: Print a table of all thumbnails and exit. match_filter: A function that gets called with the info_dict of every video. If it returns a message, the video is ignored. If it returns None, the video is downloaded. match_filter_func in utils.py is one example for this. no_color: Do not emit color codes in output. geo_bypass: Bypass geographic restriction via faking X-Forwarded-For HTTP header (experimental) geo_bypass_country: Two-letter ISO 3166-2 country code that will be used for explicit geographic restriction bypassing via faking X-Forwarded-For HTTP header (experimental) The following options determine which downloader is picked: external_downloader: Executable of the external downloader to call. None or unset for standard (built-in) downloader. hls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv if True, otherwise use ffmpeg/avconv if False, otherwise use downloader suggested by extractor if None. The following parameters are not used by YoutubeDL itself, they are used by the downloader (see youtube_dl/downloader/common.py): nopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test, noresizebuffer, retries, continuedl, noprogress, consoletitle, xattr_set_filesize, external_downloader_args, hls_use_mpegts. The following options are used by the post processors: prefer_ffmpeg: If True, use ffmpeg instead of avconv if both are available, otherwise prefer avconv. postprocessor_args: A list of additional command-line arguments for the postprocessor. The following options are used by the Youtube extractor: youtube_include_dash_manifest: If True (default), DASH manifests and related data will be downloaded and processed by extractor. You can reduce network I/O by disabling it if you don't care about DASH. 网络配置：socks5/HTTP","link":"/2022/02/17/Python%E6%90%AD%E9%85%8Dyoutube-dl%E4%B8%8B%E8%BD%BD%E6%B2%B9%E7%AE%A1%E8%A7%86%E9%A2%91/"},{"title":"","text":"Python 搭配 Aria2进行下载 Aria2 github地址 https://github.com/aria2/aria2 为什么要用Aria2 aria2p github地址 https://github.com/pawamoy/aria2p 1conda install -c bioconda aria2","link":"/2022/02/17/Python%20%E6%90%AD%E9%85%8D%20Aria2%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD/"}],"tags":[{"name":"翻译","slug":"翻译","link":"/tags/%E7%BF%BB%E8%AF%91/"},{"name":"独立站","slug":"独立站","link":"/tags/%E7%8B%AC%E7%AB%8B%E7%AB%99/"},{"name":"EcomCrew","slug":"EcomCrew","link":"/tags/EcomCrew/"},{"name":"Knitting.com系列","slug":"Knitting-com系列","link":"/tags/Knitting-com%E7%B3%BB%E5%88%97/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"youtube-dl","slug":"youtube-dl","link":"/tags/youtube-dl/"}],"categories":[]}